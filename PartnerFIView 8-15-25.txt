let
    // Base from balances to leverage balances and scenario context
    Base = Table.SelectColumns(BalancesTable, {"Month", "ScenarioName", "ScenarioDisplay", "CheckingBalance", "SavingsBalance"}),

    // Bring DebitCardTransactionAmount as the spend base for interchange
    JoinedDebitSpend = Table.NestedJoin(Base, {"Month", "ScenarioName"},
        Table.SelectColumns(OutflowsTable, {"Month", "ScenarioName", "DebitCardTransactionAmount"}), {"Month", "ScenarioName"},
        "DebitData", JoinKind.LeftOuter),
    ExpandedDebit = Table.ExpandTableColumn(JoinedDebitSpend, "DebitData", {"DebitCardTransactionAmount"}, {"DebitCardTransactionAmount"}),

    // Partner rates from global numeric parameters (not interpolated)
    JoinedInterchangeRate = Table.NestedJoin(ExpandedDebit, {},
        Table.SelectRows(GlobalNumericValues, each [InputType] = "PartnerInterchange"), {},
        "PartnerInterchangeRateData", JoinKind.LeftOuter),
    ExpandedInterchangeRate = Table.ExpandTableColumn(JoinedInterchangeRate, "PartnerInterchangeRateData", {"Value"}, {"PartnerInterchangeRate"}),

    JoinedInterestRate = Table.NestedJoin(ExpandedInterchangeRate, {},
        Table.SelectRows(GlobalNumericValues, each [InputType] = "PartnerInterest"), {},
        "PartnerInterestRateData", JoinKind.LeftOuter),
    ExpandedInterestRate = Table.ExpandTableColumn(JoinedInterestRate, "PartnerInterestRateData", {"Value"}, {"PartnerInterestRate"}),

    // Replace null rate values with 0 to avoid null math
    FilledRates = Table.ReplaceValue(ExpandedInterestRate, null, 0, Replacer.ReplaceValue, {"PartnerInterchangeRate", "PartnerInterestRate"}),

    // Join precomputed average balances
    JoinedAverages = Table.NestedJoin(FilledRates, {"Month", "ScenarioName"},
        Table.SelectColumns(AverageBalances, {"Month", "ScenarioName", "AvgCheckingBalance", "AvgSavingsBalance"}), {"Month", "ScenarioName"},
        "AvgData", JoinKind.LeftOuter),
    WithAverages = Table.ExpandTableColumn(JoinedAverages, "AvgData", {"AvgCheckingBalance", "AvgSavingsBalance"}, {"AvgCheckingBalance", "AvgSavingsBalance"}),

    // Calculations
    AddedInterchange = Table.AddColumn(WithAverages, "InterchangeRevenue", each
        [DebitCardTransactionAmount] * [PartnerInterchangeRate]
    ),
    AddedCheckingInterest = Table.AddColumn(AddedInterchange, "CheckingInterestRevenue", each
        [AvgCheckingBalance] * [PartnerInterestRate]
    ),
    AddedSavingsInterest = Table.AddColumn(AddedCheckingInterest, "SavingsInterestRevenue", each
        [AvgSavingsBalance] * [PartnerInterestRate]
    ),

    // Data types
    ChangedTypes = Table.TransformColumnTypes(AddedSavingsInterest, {
        {"Month", Int64.Type},
        {"CheckingBalance", type number},
        {"SavingsBalance", type number},
        {"DebitCardTransactionAmount", type number},
        {"PartnerInterchangeRate", type number},
        {"PartnerInterestRate", type number},
        {"AvgCheckingBalance", type number},
        {"AvgSavingsBalance", type number},
        {"InterchangeRevenue", type number},
        {"CheckingInterestRevenue", type number},
        {"SavingsInterestRevenue", type number}
    })
in
    ChangedTypes

