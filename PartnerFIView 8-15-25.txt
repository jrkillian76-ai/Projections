let
    // Robust helpers to fetch numeric parameters from GlobalNumericParameters or GlobalTextParameters
    // without directly referencing those queries (to avoid name resolution errors)
    TryGetQuery = (queryName as text) as any =>
        let
            env = #shared,
            exists = Record.HasFields(env, queryName),
            value = if exists then Record.Field(env, queryName) else null
        in
            value,
    TryGetWideValue = (tbl as table, names as list) as any =>
        let
            tryRow = try tbl{0} otherwise null,
            value = if tryRow = null then null else List.First(List.RemoveNulls(List.Transform(names, (n) => try Record.Field(tryRow, n) otherwise null)), null)
        in
            value,
    TryGetKVValue = (tbl as table, keyNames as list, valNames as list, paramNames as list) as any =>
        let
            cols = try Table.ColumnNames(tbl) otherwise {},
            keyCol = List.First(List.RemoveNulls(List.Transform(keyNames, (n) => if List.Contains(cols, n) then n else null)), null),
            valCol = List.First(List.RemoveNulls(List.Transform(valNames, (n) => if List.Contains(cols, n) then n else null)), null),
            found = if keyCol <> null and valCol <> null then
                let
                    lowered = Table.TransformColumns(tbl, {{keyCol, each Text.Lower(Text.From(_)), type text}}),
                    target = List.Transform(paramNames, each Text.Lower(_)),
                    row = try Table.SelectRows(lowered, each List.Contains(target, Record.Field(_, keyCol))){0} otherwise null
                in row else null,
            value = try (if found <> null then Record.Field(found, valCol) else null) otherwise null
        in
            value,
    GetNumericParameter = (paramName as text, optional altNames as nullable list) as number =>
        let
            names = if altNames = null then {paramName} else List.Distinct({paramName} & altNames),
            numericTable = TryGetQuery("GlobalNumericParameters"),
            textTable = TryGetQuery("GlobalTextParameters"),
            // Try numeric table (wide)
            wideNum = try TryGetWideValue(numericTable, names) otherwise null,
            // Try numeric table (KV)
            kvNum = try TryGetKVValue(numericTable, {"ParameterName", "Parameter", "Name", "Key"}, {"Value", "NumericValue", "NumberValue"}, names) otherwise null,
            // Try text table fallbacks
            wideText = try TryGetWideValue(textTable, names) otherwise null,
            kvText = try TryGetKVValue(textTable, {"ParameterName", "Parameter", "Name", "Key"}, {"Value", "TextValue"}, names) otherwise null,
            candidate = List.First(List.RemoveNulls({wideNum, kvNum, wideText, kvText}), null),
            result = try Number.From(candidate) otherwise 0
        in
            result,

    // Base from balances to leverage balances and scenario context
    Base = Table.SelectColumns(BalancesTable, {"Month", "ScenarioName", "ScenarioDisplay", "CheckingBalance", "SavingsBalance"}),

    // Bring DebitCardTransactionAmount as the spend base for interchange
    JoinedDebitSpend = Table.NestedJoin(Base, {"Month", "ScenarioName"},
        Table.SelectColumns(OutflowsTable, {"Month", "ScenarioName", "DebitCardTransactionAmount"}), {"Month", "ScenarioName"},
        "DebitData", JoinKind.LeftOuter),
    ExpandedDebit = Table.ExpandTableColumn(JoinedDebitSpend, "DebitData", {"DebitCardTransactionAmount"}, {"DebitCardTransactionAmount"}),

    // Partner rates from GlobalNumericParameters with safe defaults
    PartnerInterchangeRateValue = GetNumericParameter("PartnerInterchangeRate", {"Partner Interchange Rate", "InterchangeRate", "Interchange Rate"}),
    PartnerInterestRateValue = GetNumericParameter("PartnerInterestRate", {"Partner Interest Rate", "InterestRate", "Interest Rate"}),
    WithRates = Table.AddColumn(
        Table.AddColumn(ExpandedDebit, "PartnerInterchangeRate", each PartnerInterchangeRateValue),
        "PartnerInterestRate", each PartnerInterestRateValue
    ),

    // Compute average balances with prior month per scenario
    Grouped = Table.Group(WithRates, {"ScenarioName", "ScenarioDisplay"}, {{"Rows", each
        let
            Sorted = Table.Sort(_, {{"Month", Order.Ascending}}),

            C_Bal = Table.Column(Sorted, "CheckingBalance"),
            C_Prev = {0} & List.RemoveLastN(C_Bal, 1),
            AvgChecking = List.Transform(List.Zip({C_Prev, C_Bal}), each ( _{0} + _{1}) / 2),

            S_Bal = Table.Column(Sorted, "SavingsBalance"),
            S_Prev = {0} & List.RemoveLastN(S_Bal, 1),
            AvgSavings = List.Transform(List.Zip({S_Prev, S_Bal}), each ( _{0} + _{1}) / 2),

            Result = Table.FromColumns(
                Table.ToColumns(Sorted) & {AvgChecking, AvgSavings},
                Table.ColumnNames(Sorted) & {"AvgCheckingBalance", "AvgSavingsBalance"}
            )
        in
            Result, type table}}),
    WithAverages = Table.Combine(Grouped[Rows]),

    // Calculations
    AddedInterchange = Table.AddColumn(WithAverages, "InterchangeRevenue", each
        [DebitCardTransactionAmount] * [PartnerInterchangeRate]
    ),
    AddedCheckingInterest = Table.AddColumn(AddedInterchange, "CheckingInterestRevenue", each
        [AvgCheckingBalance] * [PartnerInterestRate]
    ),
    AddedSavingsInterest = Table.AddColumn(AddedCheckingInterest, "SavingsInterestRevenue", each
        [AvgSavingsBalance] * [PartnerInterestRate]
    ),

    // Data types
    ChangedTypes = Table.TransformColumnTypes(AddedSavingsInterest, {
        {"Month", Int64.Type},
        {"CheckingBalance", type number},
        {"SavingsBalance", type number},
        {"DebitCardTransactionAmount", type number},
        {"PartnerInterchangeRate", type number},
        {"PartnerInterestRate", type number},
        {"AvgCheckingBalance", type number},
        {"AvgSavingsBalance", type number},
        {"InterchangeRevenue", type number},
        {"CheckingInterestRevenue", type number},
        {"SavingsInterestRevenue", type number}
    })
in
    ChangedTypes

