let
    // Helper to fetch numeric parameter from GlobalNumericParameters
    GetNumericParameter = (paramName as text) as number =>
        let
            SingleRowValue = try Record.Field(GlobalNumericParameters{0}, paramName) otherwise null,
            ColNames = try Table.ColumnNames(GlobalNumericParameters) otherwise {},
            PossibleKeys = {"ParameterName", "Parameter", "Name", "Key"},
            PossibleVals = {"Value", "NumericValue", "NumberValue"},
            KeyCol = List.First(List.RemoveNulls(List.Transform(PossibleKeys, each if List.Contains(ColNames, _) then _ else null)), null),
            ValCol = List.First(List.RemoveNulls(List.Transform(PossibleVals, each if List.Contains(ColNames, _) then _ else null)), null),
            FoundRow = try (if KeyCol <> null then Table.SelectRows(GlobalNumericParameters, (r) => Record.Field(r, KeyCol) = paramName){0} else null) otherwise null,
            KVValue = try (if FoundRow <> null and ValCol <> null then Record.Field(FoundRow, ValCol) else null) otherwise null,
            Candidate = if SingleRowValue <> null then SingleRowValue else KVValue,
            Result = try Number.From(Candidate) otherwise 0
        in
            Result,

    // Base from balances to leverage balances and scenario context
    Base = Table.SelectColumns(BalancesTable, {"Month", "ScenarioName", "ScenarioDisplay", "CheckingBalance", "SavingsBalance"}),

    // Bring DebitCardTransactionAmount as the spend base for interchange
    JoinedDebitSpend = Table.NestedJoin(Base, {"Month", "ScenarioName"},
        Table.SelectColumns(OutflowsTable, {"Month", "ScenarioName", "DebitCardTransactionAmount"}), {"Month", "ScenarioName"},
        "DebitData", JoinKind.LeftOuter),
    ExpandedDebit = Table.ExpandTableColumn(JoinedDebitSpend, "DebitData", {"DebitCardTransactionAmount"}, {"DebitCardTransactionAmount"}),

    // Partner rates from GlobalNumericParameters with safe defaults
    PartnerInterchangeRateValue = GetNumericParameter("PartnerInterchangeRate"),
    PartnerInterestRateValue = GetNumericParameter("PartnerInterestRate"),
    WithRates = Table.AddColumn(
        Table.AddColumn(ExpandedDebit, "PartnerInterchangeRate", each PartnerInterchangeRateValue),
        "PartnerInterestRate", each PartnerInterestRateValue
    ),

    // Compute average balances with prior month per scenario
    Grouped = Table.Group(WithRates, {"ScenarioName", "ScenarioDisplay"}, {{"Rows", each
        let
            Sorted = Table.Sort(_, {{"Month", Order.Ascending}}),

            C_Bal = Table.Column(Sorted, "CheckingBalance"),
            C_Prev = {0} & List.RemoveLastN(C_Bal, 1),
            AvgChecking = List.Transform(List.Zip({C_Prev, C_Bal}), each ( _{0} + _{1}) / 2),

            S_Bal = Table.Column(Sorted, "SavingsBalance"),
            S_Prev = {0} & List.RemoveLastN(S_Bal, 1),
            AvgSavings = List.Transform(List.Zip({S_Prev, S_Bal}), each ( _{0} + _{1}) / 2),

            Result = Table.FromColumns(
                Table.ToColumns(Sorted) & {AvgChecking, AvgSavings},
                Table.ColumnNames(Sorted) & {"AvgCheckingBalance", "AvgSavingsBalance"}
            )
        in
            Result, type table}}),
    WithAverages = Table.Combine(Grouped[Rows]),

    // Calculations
    AddedInterchange = Table.AddColumn(WithAverages, "InterchangeRevenue", each
        [DebitCardTransactionAmount] * [PartnerInterchangeRate]
    ),
    AddedCheckingInterest = Table.AddColumn(AddedInterchange, "CheckingInterestRevenue", each
        [AvgCheckingBalance] * [PartnerInterestRate]
    ),
    AddedSavingsInterest = Table.AddColumn(AddedCheckingInterest, "SavingsInterestRevenue", each
        [AvgSavingsBalance] * [PartnerInterestRate]
    ),

    // Data types
    ChangedTypes = Table.TransformColumnTypes(AddedSavingsInterest, {
        {"Month", Int64.Type},
        {"CheckingBalance", type number},
        {"SavingsBalance", type number},
        {"DebitCardTransactionAmount", type number},
        {"PartnerInterchangeRate", type number},
        {"PartnerInterestRate", type number},
        {"AvgCheckingBalance", type number},
        {"AvgSavingsBalance", type number},
        {"InterchangeRevenue", type number},
        {"CheckingInterestRevenue", type number},
        {"SavingsInterestRevenue", type number}
    })
in
    ChangedTypes

