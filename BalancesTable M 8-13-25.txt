let
	BaseData = CalculationsTable,
	AddBalancesToTable = (tbl as table) as table =>
		let
			Sorted = Table.Sort(tbl, {{"Month", Order.Ascending}}),
			CheckingFlows = Table.Column(Sorted, "Monthly_Checking"),
			CheckingRates = Table.Column(Sorted, "CheckingUsageRate"),
			CheckingPairs = List.Zip({CheckingFlows, CheckingRates}),
			CheckingAcc = List.Accumulate(CheckingPairs, {0}, (acc, pr) => acc & { List.Last(acc) * pr{1} + pr{0} }),
			CheckingBalances = List.Skip(CheckingAcc),

			SavingsFlows = Table.Column(Sorted, "Monthly_Savings"),
			SavingsRates = Table.Column(Sorted, "SavingsUsageRate"),
			SavingsPairs = List.Zip({SavingsFlows, SavingsRates}),
			SavingsAcc = List.Accumulate(SavingsPairs, {0}, (acc, pr) => acc & { List.Last(acc) * pr{1} + pr{0} }),
			SavingsBalances = List.Skip(SavingsAcc),

			Result = Table.FromColumns(
				Table.ToColumns(Sorted) & {CheckingBalances, SavingsBalances},
				Table.ColumnNames(Sorted) & {"CheckingBalance", "SavingsBalance"}
			)
		in
			Result,
	Grouped = Table.Group(BaseData, {"ScenarioName", "ScenarioDisplay"}, {{"Rows", each AddBalancesToTable(_), type table}}),
	Combined = Table.Combine(Grouped[Rows])

in
	Combined