let
    BaseData = CalcsTable,

    AddBalancesToTable = (tbl as table) as table =>
        let
            Sorted = Table.Sort(tbl, {{"Month", Order.Ascending}}),

            CheckingFlows = Table.Column(Sorted, "Monthly_Checking"),
            CheckingUsage = Table.Column(Sorted, "CheckingUsage"),
            CheckingPairs = List.Zip({CheckingFlows, CheckingUsage}),
            CheckingAcc = List.Accumulate(CheckingPairs, {0}, (acc, pr) => acc & { List.Last(acc) + pr{0} - pr{1} }),
            CheckingBalances = List.Skip(CheckingAcc),

            SavingsFlows = Table.Column(Sorted, "Monthly_Savings"),
            SavingsUsage = Table.Column(Sorted, "SavingsUsage"),
            SavingsPairs = List.Zip({SavingsFlows, SavingsUsage}),
            SavingsAcc = List.Accumulate(SavingsPairs, {0}, (acc, pr) => acc & { List.Last(acc) + pr{0} - pr{1} }),
            SavingsBalances = List.Skip(SavingsAcc),

            Result = Table.FromColumns(
                Table.ToColumns(Sorted) & {CheckingBalances, SavingsBalances},
                Table.ColumnNames(Sorted) & {"CheckingBalance", "SavingsBalance"}
            )
        in
            Result,

    Grouped = Table.Group(BaseData, {"ScenarioName", "ScenarioDisplay"}, {{"Rows", each AddBalancesToTable(_), type table}}),
    Combined = Table.Combine(Grouped[Rows])
in
    Combined

